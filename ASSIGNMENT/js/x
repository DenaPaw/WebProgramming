import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import {
    SafeAreaView,
    Text,
    TouchableOpacity,
    Switch,
    StyleSheet,
    Alert,
    View,
    Image,
    Modal,
    FlatList
} from 'react-native';
import { auth, db } from "../config/firebase";
import { signOut, updatePassword, updateEmail } from "firebase/auth";
import { updateDoc, doc } from "firebase/firestore";

// ATU Colors
const ATU_GREEN = "#004D2B";
const ATU_GOLD = "#E1C13F";
const DARK_MODE_BG = "#00291F";

// Avatar options
const avatarOptions = [
    { filename: "black.png", source: require('../assets/Avatars/black.png') },
    { filename: "blueCowboy.png", source: require('../assets/Avatars/blueCowboy.png') },
    { filename: "greenCowboy.png", source: require('../assets/Avatars/greenCowboy.png') },
    { filename: "pinkTiara.png", source: require('../assets/Avatars/pinkTiara.png') },
    { filename: "red.png", source: require('../assets/Avatars/red.png') },
    { filename: "tealTiara.png", source: require('../assets/Avatars/tealTiara.png') }
];

export default function SettingsScreen() {
    const router = useRouter();
    const [darkMode, setDarkMode] = useState(false);
    const [notificationsEnabled, setNotificationsEnabled] = useState(true);
    const [modalVisible, setModalVisible] = useState(false);
    const [selectedAvatar, setSelectedAvatar] = useState(avatarOptions[0]); // Default avatar

    // Toggle Dark Mode
    const toggleDarkMode = () => setDarkMode((prev) => !prev);

    // Toggle Notifications
    const toggleNotifications = () => setNotificationsEnabled((prev) => !prev);

    // Handle Logout
    const handleLogout = async () => {
        try {
            await signOut(auth);
            router.replace("/login");
        } catch (error) {
            Alert.alert("Logout Error", "Failed to log out. Try again.");
        }
    };

    // Change Password
    const handleChangePassword = async () => {
        const user = auth.currentUser;
        if (user) {
            try {
                await updatePassword(user, "NewSecurePassword123"); // Prompt user for one
                Alert.alert("Success", "Password updated successfully!");
            } catch (error) {
                Alert.alert("Error", "Could not update password.");
            }
        }
    };

    // Change Email
    const handleChangeEmail = async () => {
        const user = auth.currentUser;
        if (user) {
            try {
                await updateEmail(user, "newemail@atu.edu"); // Replace with actual user input
                Alert.alert("Success", "Email updated successfully!");
            } catch (error) {
                Alert.alert("Error", "Could not update email.");
            }
        }
    };

    // Handle Avatar Selection
    const handleAvatarSelection = async (avatar) => {
        try {
            setSelectedAvatar(avatar);
            console.log("Avatar selected:", avatar.filename);

            const user = auth.currentUser;
            if (user) {
                const docRef = doc(db, "users", user.uid);
                await updateDoc(docRef, { profileAvatar: `assets/Avatars/${avatar.filename}` });

                Alert.alert("Success", "Avatar updated successfully!");
            }
        } catch (error) {
            Alert.alert("Error", "Could not update avatar.");
        }
    };

    return (
        <SafeAreaView style={[styles.container, darkMode && styles.darkContainer]}>
            {/* Header Section */}
            <Text style={[styles.heading, darkMode && styles.darkText]}>‚öôÔ∏è Settings</Text>

            {/* Profile Picture Section */}
            <TouchableOpacity onPress={() => setModalVisible(true)} style={styles.avatarContainer}>
                <Image source={selectedAvatar.source} style={styles.profileImage} />
                <Text style={[styles.settingText, darkMode && styles.darkText]}>Change Avatar</Text>
            </TouchableOpacity>

            {/* Settings List */}
            <View style={styles.settingsList}>
                <TouchableOpacity style={styles.settingItem} onPress={toggleDarkMode}>
                    <Text style={[styles.settingText, darkMode && styles.darkText]}>üåô Dark Mode</Text>
                    <Switch value={darkMode} onValueChange={toggleDarkMode} />
                </TouchableOpacity>

                <TouchableOpacity style={styles.settingItem} onPress={toggleNotifications}>
                    <Text style={[styles.settingText, darkMode && styles.darkText]}>üîî Notifications</Text>
                    <Switch value={notificationsEnabled} onValueChange={toggleNotifications} />
                </TouchableOpacity>

                <TouchableOpacity style={styles.button} onPress={handleChangePassword}>
                    <Text style={styles.buttonText}>üîë Change Password</Text>
                </TouchableOpacity>

                <TouchableOpacity style={styles.button} onPress={handleChangeEmail}>
                    <Text style={styles.buttonText}>üìß Change Email</Text>
                </TouchableOpacity>
            </View>

            {/* Logout & Back to Home */}
            <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
                <Text style={styles.buttonText}>üö™ Logout</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.backButton} onPress={() => router.push("/home")}>
                <Text style={styles.backButtonText}>üè† Back to Home</Text>
            </TouchableOpacity>

            {/* Avatar Selection Modal */}
            <Modal visible={modalVisible} transparent animationType="slide">
                <View style={styles.modalContainer}>
                    <FlatList
                        data={avatarOptions}
                        numColumns={3}
                        keyExtractor={(item) => item.filename}
                        renderItem={({ item }) => (
                            <TouchableOpacity onPress={() => {
                                handleAvatarSelection(item);
                                setModalVisible(false);
                            }}>
                                <Image source={item.source} style={styles.avatarOption} />
                            </TouchableOpacity>
                        )}
                    />
                </View>
            </Modal>
        </SafeAreaView>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, alignItems: 'center', backgroundColor: '#f5f5f5', padding: 20 },
    darkContainer: { backgroundColor: DARK_MODE_BG },
    heading: { fontSize: 28, fontWeight: 'bold', marginBottom: 30, color: ATU_GREEN },
    darkText: { color: '#fff' },
    settingsList: { width: '100%', marginTop: 20 },
    settingItem: { flexDirection: 'row', justifyContent: 'space-between', paddingVertical: 15, borderBottomWidth: 1, borderBottomColor: '#ccc' },
    settingText: { fontSize: 18, color: ATU_GREEN },
    button: { marginTop: 15, paddingVertical: 12, backgroundColor: ATU_GREEN, borderRadius: 10, alignItems: 'center' },
    logoutButton: { marginTop: 20, paddingVertical: 12, backgroundColor: '#f54242', borderRadius: 10, alignItems: 'center' },
    backButton: { marginTop: 40, paddingVertical: 12, backgroundColor: ATU_GOLD, borderRadius: 10, alignItems: 'center' },
    buttonText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
    profileImage: { width: 100, height: 100, borderRadius: 50, marginBottom: 10 },
    avatarContainer: { alignItems: 'center', marginBottom: 20 },
});
